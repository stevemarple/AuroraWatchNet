#!/usr/bin/env python

import argparse
import logging
import os
import subprocess
import sys
import time

if sys.version_info[0] >= 3:
    import configparser
    from configparser import SafeConfigParser
else:
    import ConfigParser
    from ConfigParser import SafeConfigParser

import aurorawatchnet as awn

logger = logging.getLogger(__name__)

def positive_int(n):
    r = int(n)
    if r <= 0:
        raise Exception('positive integer required')
    return r

# Parse command line arguments
parser = \
    argparse.ArgumentParser(description='AuroraWatch data recording daemon')

parser.add_argument('-c', '--config-file',
                    default='/etc/awnet.ini',
                    help='Configuration file')
parser.add_argument('-d', '--delete',
                    action='store_true',
                    help='Delete status file before checking')
parser.add_argument('-i', '--interval',
                    default=10,
                    type=positive_int,
                    help='Interval in seconds between tries',
                    metavar='NUMBER')
parser.add_argument('-t', '--tries',
                    default=1,
                    type=positive_int,
                    help='Number of checks made until successful',
                    metavar='NUMBER')
parser.add_argument('--log-level', 
                    choices=['debug', 'info', 'warning', 'error', 'critical'],
                    default='warning',
                    help='Control how much details is printed',
                    metavar='LEVEL')
parser.add_argument('--log-format',
                    default='%(levelname)s:%(message)s',
                    help='Set format of log messages',
                    metavar='FORMAT')

args = parser.parse_args()
if __name__ == '__main__':
    logging.basicConfig(level=getattr(logging, args.log_level.upper()),
                        format=args.log_format)


try:
    config = awn.read_config_file(args.config_file)
except Exception as e:
    logger.error('Could not read config file ' + args.config_file)
    exit(1)

if not config.has_option('ntp_status', 'filename'):
    logger.error('Config file does not specify NTP status filename')
    exit(2)

status_file = config.get('ntp_status', 'filename')

if args.delete and os.path.exists(status_file):
    os.remove(status_file)
    logger.info('Removed existing status file')

sync = False

for n in range(args.tries):
    try:
        cmd = ['ntpq', '-np']
        logger.debug(' '.join(cmd))

        dev_null = open('/dev/null', 'w')
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT).rstrip()
        logger.info(output)

        for line in output.splitlines():
            if line.startswith('*'):
                sync = True


    except Exception as e:
        logger.error(str(e))

    if sync:
        logger.info('NTP synchronized')
        with open(status_file, 'w+') as f:
            logger.debug('Created ' + status_file)
        break
    else:
        logger.info('NTP not synchronized')
        if os.path.exists(status_file):
            os.remove(status_file)
            logger.debug('Removed ' + status_file)

    if n != args.tries - 1:
        logger.debug('sleeping')
        time.sleep(args.interval)



