# Default awnet.ini file for AuroraWatchNet Raspberry Pi magnetometer
[DEFAULT]
project = aurorawatchnet
site = test

[awnettextdata]
filename = /data/%(project)s/%(site)s/%%Y/%%m/%(site)s_%%Y%%m%%d.txt

[logfile]
filename = /data/%(project)s/%(site)s/%%Y/%%m/%(site)s_%%Y%%m%%d.log

[magnetometer]
siteid = 0
key = 00000000000000000000000000000000

[controlsocket]
port = 16587

[daemon]
name = raspimagd
sampling_interval = 5
# The I2C bus number used on the Raspberry Pi. May require modification for
# older Raspberry Pi models.
i2c = 1

# Define I2C addresses
x_address = 0x6E
y_address = 0x6A
z_address = 0x6C

# Define channel on ADC (starts at 0!)
x_channel = 0
y_channel = 0
z_channel = 0

# Sampling resolution
x_resolution = 18
y_resolution = 18
z_resolution = 18

# Gain of programmable gain amplifier for each channel
x_gain = 2
y_gain = 2
z_gain = 1

# The standard FLC100 has a sensitvity of 50000nT/V. 
x_scale_factor = 50000
y_scale_factor = 50000
z_scale_factor = 50000

# Number of samples for the magnetometer
oversampling = 15

# Method used to reduce oversampling to a single value
aggregate = mean

# Define inputs and other parameters associated with the temperature
# sensor
# LM61:
# v(volts) = 0.01*T(degC) + 0.6(volts)
# => T = [v(volts) - 0.6(volts)] * 100
# => T = 100v - 60
sensor_temperature_address = 0x6E
sensor_temperature_channel = 3
sensor_temperature_oversampling = 1
sensor_temperature_resolution = 18
sensor_temperature_scale_factor = 100
sensor_temperature_offset = -60

# Preferred upload method. Uncomment one section and insert correct
# details.

# Restricted rsync upload, see ~/.ssh/config for connection details to awn-data
# [upload]
# method = rrsync
# rsync_host = awn-data
# rsync_options = --no-times

# HTTPS upload
# [upload]
# Obtain upload details from AuroraWatch UK
# url = https://
# username =
# password = 
# realm =

# Real-time data transfer, 1 UDP packet after each sample
# Not yet implemented for raspimagd. Obtain host, port and key from
# AuroraWatch UK
# [realtime_transfer:awuk]
# remote_host = 
# remote_port = 
# remote_key = 

[ntp_status]
# Have check_ntp_status save to a tmpfs filesystem
filename = /home/pi/tmpfs/ntp_status_ok
max_age = 150

# Create files in the dataqualitymonitor directory to mark data
# quality as suspect. Data will be stored in files with ".bad"
# appended to the name whilst the file(s) exist.
[dataqualitymonitor]
directory = /home/pi/tmpfs/data_quality.d

